<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- 
		@Autowired, @Resource, @Value, @PostConstructor, @PreDestroy 등의 
		어노테이션을 감지해서 스프링 컨테이너가 관리하는 빈(객체)들간의 의존성 주입 등의 작업을 수행하는 
		xxxAnnotationProcessor가 스프링의 빈으로 등록된다. 
	 -->	
	<context:annotation-config />
	<!-- 
		@Controller 어너테이션이 부착된 컨트롤러 클래스들을 kr.co.jhta.web 패키지에서 검색해서 스프링의 빈으로 등록한다.
	 -->
	<context:component-scan base-package="kr.co.jhta.web, kr.co.jhta.view" />
	
	<!-- 
		@Controller, @RestController, @ControllerAdvice, @RequestMapping,
		@RequestParam, @ModelAttribute, @PathVariable, @Valid 등
		spring MVC 관련 어노테이션을 감지해서 적절한 작업을 수행하는 클래스들이 스프링의 빈으로 등록된다.
	 -->
	<mvc:annotation-driven>
		<mvc:argument-resolvers>
			<bean class="kr.co.jhta.resolver.UserArgumentResolver" />
		</mvc:argument-resolvers>
	</mvc:annotation-driven>
	
	
	<!-- 
		<mvc:resources /> 태그는 정적리소스(그림, 동여상, css, js)에
		대한 요청이 접수되면 DispatcherServlet
	 -->
	<mvc:resources location="/resources/" mapping="/resources/**" />
	<mvc:resources location="/" mapping="/*.html" />
	
	<!-- 
		인터셉터를 스프링의 빈으로 등록하기
	 -->
	<bean id = "authenticationInterceptor" 
			class="kr.co.jhta.interceptor.AuthenticationInterceptor"></bean>
	<bean id ="authorizationInterceptor" 
			class="kr.co.jhta.interceptor.AuthorizationInterceptor"></bean>
	
	<!-- 
		모든 URL 요청에 대해서 2개의 인터셉터가 실행되도록 설정하기
		순서대로 동작한다. 앞에서 false를 반환하는 경우 뒤에 있는 인터페이스는 동작하지 않는다.
	 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<mvc:exclude-mapping path="/json/**"/>
			<mvc:exclude-mapping path="/rest/**"/>
			<ref bean="authenticationInterceptor"/>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<mvc:exclude-mapping path="/json/**"/>
			<mvc:exclude-mapping path="/rest/**"/>
			<ref bean="authorizationInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>
	
	<!-- 
		* <mvc:view-resolvers />태그에는 다양한 ViewResolver관련 설정을 포함할 수 있다.
		* <mvc:jsp prefix="" suffix="" />은 뷰템플릿(모델의 데이터가 표현되는 곳)이 
		  jsp일 때 사용되는 태그다.
		  <mvc:jsp />는 InternalResourceViewResolver를 스프링의 빈으로 등록하고,
		  jsp 페이지를 검색할 때 prefix와  suffix에 설정된 값을 사용한다.
	 -->
	<mvc:view-resolvers>
		<!-- 해당 경로 밑에서 jsp를 찾으라고 설정하는것. -->
		<mvc:jsp prefix="/WEB-INF/views/" suffix=".jsp" /> <!-- url의 접두사, 접미사 설정 -->
	</mvc:view-resolvers>
	
	<!-- 반드시 'multipartResolver' 이름으로 등록해야한다. DispatcherServlet에 상수로 등록되어 있기 때문. -->
	<!-- 
		* Multipart요청(폼에 첨부파일 업로드가 존재할때의 요청)을 처리하는 CommonsMultipartResolver를 스프링의 빈으로 등록한다.
		* CommonsMultipartResolver는 Apache commons-fileupload.jar와 commons-io.jar를 이용해서 multipart요청을 처리한다.
	 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	</bean>
	
	<context:property-placeholder location="/WEB-INF/spring/mvc.properties"/>
</beans>