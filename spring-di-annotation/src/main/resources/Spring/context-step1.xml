<?xml version="1.0" encoding="UTF-8"?>

<!-- beans 태그 등록하기 > Namespaces 에서 필요한 태그 체크하기 -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
<!-- 
	어노테이션을 찾는다. 이 후 스프링 컨테이너에 생성한다.
 -->
<context:annotation-config></context:annotation-config>

<!-- 
	<context:component-scan /> : @xxxx 어노테이션이 붙어있는 클래스들을 찾아서 객체를 생성해줌, @Component의 모든 자식들을 스캔한다.	
	@Component : 모든 어노테이션의 부모	
	지정된 패키지 및 그 하위 패키지에서 @Component, @Controller, @ControllerAdvice, @RestController, @Service, @Repository 등의
	Annotation이 부착된 모든 클래스를 검색해서 자동으로 스프링 컨테이너가 객체를 생성한다.
 -->
<context:component-scan base-package="kr.co.jhta.di"></context:component-scan>

<!-- 
	<context:property-placeholder /> : location으로 지정된 경로에서 spring.properties(값을 저장하는 용도) 파일을 전부 읽어오고
	파일의 내용을 key와 value로 구분해서 그 정보를 가지고 있는 객체를 스프링 컨테이너가 생성한다.
	그 정보는 아래와 같이 사용된다.
	* 객체 생성을 수동으로 설정하는 경우
	<bean class="x.y.z.SmsMessageSender">
		<property name="company" value="${message.sender.sms.company}"/>
	</bean>
	* 객체 생성을 자동으로 하는 경우
	@Component
	public class SmsMessageSender implements MessageSender {
		@Value("${message.sender.sms.company}")
		private String company;
	}
 -->
<context:property-placeholder location="classpath:/config/spring.properties"/>
</beans>
